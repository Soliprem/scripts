#!/usr/bin/env python

import gi
gi.require_version('Gtk', '3.24')
from gi.repository import Gtk

class PomodoroTimer(Gtk.Window):
    def __init__(self):
        super().__init__(title='Pomodoro Timer')
        self.set_default_size(200, 200)

        # Create a container widget to hold the buttons
        buttons_container = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        self.add(buttons_container)

        # Create the start button
        self.start_button = Gtk.Button(label='Start')
        self.start_button.connect('clicked', self.on_start_clicked)
        buttons_container.add(self.start_button)

        # Create the pause button
        self.pause_button = Gtk.Button(label='Pause')
        self.pause_button.connect('clicked', self.on_pause_clicked)
        buttons_container.add(self.pause_button)

        # Create the reset button
        self.reset_button = Gtk.Button(label='Reset')
        self.reset_button.connect('clicked', self.on_reset_clicked)
        buttons_container.add(self.reset_button)

        # Start the timer
        self.on_start_clicked()

    def on_start_clicked(self):
        # Create the timer object
        self.timer = Gtk.Timer.new(1000)
        self.timer.connect('timeout', self.on_timer_timeout)
        self.timer.start()

    def on_timer_timeout(self):
        # Decrement the timer
        minutes, seconds = self.timer_label.get_text().split(':')
        seconds = int(seconds) - 1
        if seconds < 0:
            minutes = int(minutes) - 1
            seconds = 59
        self.timer_label.set_text('%d:%02d' % (minutes, seconds))

        # If the timer is finished, reset it
        if seconds == 0:
            self.timer.stop()
            self.on_reset_clicked()

    def on_pause_clicked(self):
        # Pause the timer
        self.timer.stop()

    def on_reset_clicked(self):
        # Reset the timer
        self.timer.stop()
        self.timer_label.set_text('25:00')

if __name__ == '__main__':
    app = PomodoroTimer()
    app.show_all()
    Gtk.main()
